#!/bin/bash
# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
if ! shopt -oq posix; then
    if [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    elif [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    fi
fi

# Local definitions that I don't want to commit
if [ -f ~/.bashrc.local ]; then
    . ~/.bashrc.local
fi

# Unlimited history
export HISTFILESIZE=
export HISTSIZE=
shopt -s histappend
shopt -s checkwinsize

# vi mode
set -o vi

exists() {
    command -v "$1" >/dev/null
    return $?
}

if exists git; then
    headhash() {  # $1 = max characters
        git branch &>/dev/null && echo "$(git rev-parse HEAD | head -c "$1") "
    }
    headbranch() {
        git branch &>/dev/null && echo "$(git rev-parse --abbrev-ref HEAD) "
    }
    export PS1='\[\e[97m\]\u\[\e[91m\]@\[\e[97m\]\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[96m\]\w\[\e[m\] '
else
    export PS1='\[\e[97m\]\u\[\e[91m\]@\[\e[97m\]\h \[\e[96m\]\w\[\e[m\] '
fi

if exists qutebrowser; then
    export BROWSER=qutebrowser
elif exists firefox; then
    export BROWSER=firefox
elif exists palemoon; then
    export BROWSER=palemoon
fi

if exists vim; then
    export EDITOR=vim
else
    export EDITOR=vi  # I mean, it's almost everywhere
fi

if exists dircolors; then
    eval $(dircolors)
    # also make sticky/other-writable directories look the same as normal ones
    LS_COLORS="$LS_COLORS:tw=01;34:ow=01;34:st=01;34;"
    export LS_COLORS
fi

bashrc() {
    local path="$HOME/.bashrc"
    $EDITOR "$path"
    >&2 echo "Reloading bashrc"
    source "$path"
}

######### WORKS WITH COREUTILS #########

cdp () {
    cd -P -- "$1" 
}

alias ls="ls --color=auto"
alias ll="ls -l --color=auto"

math() {
    echo $(($@))
}

mkcdir () {
    mkdir -p -- "$1" && cd -P -- "$1"
}

n() {
     local threshold=16
     local file=~/notes
     local lines

     if [ "$1" != "" ]; then
          echo "$@" >> $file
          return 0
     fi
     if [ ! -f $file ]; then
          echo " === no notes ==="
          return 1
     fi
     lines=$(wc -l < $file)
     if [ $(( lines > threshold )) = 1 ]; then
          echo " === last $threshold lines ==="
     fi
     tail -n $threshold $file
     return 0
}

# color stderr of a command in red
# note: if interlaced with stdout, outputs may be slightly out of order
rederr() {
    "$@" 2> >(while read -r line; do echo -e "\e[31m$line\e[0m" >&2; done);
}

stopwatch() {
    date1=$(date +%s); while true; do
        echo -ne "$(date -u --date @$(($(date +%s) - date1)) +%H:%M:%S)\r";
    done
}

touchx() {
    touch "$1" && chmod +x "$1"
}

initsh() {
    [ -e "$1" ] && echo >&2 "$1: file exists" && return 1
    touchx "$1" && echo "#!/bin/bash" > "$1" && $EDITOR "$1"
}

#### COMMAND DEPENDENT DECLARATIONS ####

if exists ansible; then
    # no cows!
    export ANSIBLE_NOCOWS=1
fi

if exists apt; then
    alias apti="apt install"
    alias aptp="apt remove --purge"
    alias aptr="apt remove"
    alias apts="apt search"
fi

if exists bc; then
    alias bc="bc -l"
fi

if exists cal; then
    alias cal="cal -m"
fi

if exists clang; then
    export CC=clang
    export CXX=clang++
fi

if exists curl; then
    alias myip='curl ipinfo.io/ip'
fi

if exists dnf; then
    alias dnfi="sudo dnf install"
    alias dnfr="sudo dnf remove"
    alias dnfs="dnf search"
    alias dnfu="sudo dnf update"
fi

if exists grep; then
    alias grep="grep --color=auto"
    greppy() {
        while read -rp $'\e[1;92m> \e[0;93m' expr; do
            echo -n $'\e[m'
            grep --color=auto -nr "$expr"
            echo
        done
        echo
    }

    hisgrep () {
        history | grep "$@"
    }
fi

if exists git; then
    alias gits='git status'
    alias gitas='git add . && git status'
    alias oneline='git log --oneline'
    gcld () {
        git clone "$1" && cd "$(basename "$_" .git)"
    }
    ghclone () {
        git clone "https://github.com/$1/$2"
    }
    ghcld () {
        ghclone "$1" "$2" && cd "$2"
    }
fi

if exists i3; then
    if [ -f ~/.config/i3/config ]; then
        alias i3c='vim ~/.config/i3/config'
    else
        alias i3c='vim ~/.i3/config'
    fi
fi

if exists i3status; then
    if [ -f ~/.config/i3status.conf ]; then
        alias i3sc='vim ~/.config/i3status.conf'
    else
        alias i3sc='vim ~/.i3status.conf'
    fi
fi

if exists java; then
    export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true'
fi

if exists luarocks; then
    eval $(luarocks path --bin --lua-version 5.1)
    export LUA_PATH="./?.lua;$LUA_PATH"
fi

if exists morf; then
    # morf colors
    export PRETTY="color"
fi

if exists most; then
    # Color manual pages
    if exists man; then
        alias man="PAGER=most man"
    fi
    if exists sfdoc; then
        alias sfdoc="PAGER=most sfdoc"
    fi
elif exists man && [ "$(type -t man)" != function ]; then
    man() {
        LESS_TERMCAP_md=$'\e[01;31m' \
        LESS_TERMCAP_me=$'\e[0m' \
        LESS_TERMCAP_se=$'\e[0m' \
        LESS_TERMCAP_so=$'\e[01;44;33m' \
        LESS_TERMCAP_ue=$'\e[0m' \
        LESS_TERMCAP_us=$'\e[01;32m' \
        command man "$@"
    }
fi

if [ -f /usr/share/nvm/init-nvm.sh ]; then
    source /usr/share/nvm/init-nvm.sh
fi

if exists pacman; then
    alias Sy='sudo pacman -Sy'
    alias Syu='sudo pacman -Syu'
    alias Scc='sudo pacman -Scc'
    alias Sc='sudo pacman -Sc'
    alias Ss='pacman -Ss'
    alias S='sudo pacman -S'
    alias R='sudo pacman -R'
    if exists downgrade; then
        alias D='sudo downgrade'
    fi
fi

if exists pacaur; then
    alias Syua='pacaur -Syua'
    alias Scca='pacaur -Scca'
    alias Sca='pacaur -Sca'
    alias Ssa='pacaur -Ssa'
    alias Sa='pacaur -Sa'
    alias Ra='pacaur -Ra'
fi

if exists pyenv; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$HOME/.pyenv/shims:$PATH"
    eval "$(pyenv init -)"
fi

if exists ranger; then
    alias rr='ranger'
fi

if exists rtorrent; then
    stty stop undef
    stty start undef
fi

if exists sox; then
    alias ding="play -n -c1 synth 0.1 sine 880 vol 0.1"
    alias megading="play -n -c1 synth 0.1 sine 880 vol 1"

    # generate a beep every 5 seconds (higher pitch every 20 seconds)
    # the fine timing might be off on other machines
    beepwatch() {
        while :; do
            play -n -c1 synth 0.1 sine 880
            sleep 4.85
            for n in 1 2 3; do
                play -n -c1 synth 0.1 sine 440
                sleep 4.85
            done
        done
    }
fi

if exists sudo; then
    alias fuck='sudo $(history -p \!\!)'
fi

if exists systemctl; then
    # No pager for systemctl
    export SYSTEMD_PAGER=
fi

if exists task; then
    alias t='task'
    alias taskrc='vim ~/.taskrc'
    if exists taskwarrior-tui; then
        alias tui='taskwarrior-tui'
    fi
fi

if exists timew; then
    alias tw='timew'

    timesh() {
        # inspired by tasksh, could be standalone
        while read -rp 'timesh> ' LINE; do
            echo [timew $LINE];
            timew $LINE;
            echo;
        done;
        echo
    }
fi

if exists tmux; then
    alias tmuxrc='vim ~/.tmux.conf'
fi

if exists tput; then
    dims() {
        echo "$(tput lines)x$(tput cols)"
    }
fi

if exists tree; then
    alias tree="tree -C"
fi

if exists tty-clock; then
    alias tty-clock="tty-clock -cC 5"
fi

if exists ulozto-downloader; then
    alias ulozto-downloader="ulozto-downloader --parts 5"
fi

if exists vagrant; then
    alias vdes='vagrant destroy -f'
    alias vhalt='vagrant halt'
    alias vscp='vagrant scp'  # needs the vagrant-scp plugin
    alias vssh='vagrant ssh'
    alias vst='vagrant status'
    alias vup='vagrant up'
    alias vups='vagrant up && vagrant ssh'
    alias vdups='vagrant destroy -f && vagrant up && vagrant ssh'
fi

if exists vim; then
    alias vimp='vim -p *'
    alias vimpp='vim -p *.[ch]pp'
    alias vimrc="vim ~/.vimrc"
    if exists find; then
        vimpy () {
            vim -p $(find . -iname '*.py')
        }
        vimlua () {
            vim -p $(find . -iname '*.lua')
        }
    fi
fi

if exists which; then
    src () {
        $EDITOR "$(which --skip-alias --skip-functions "$1")"
    }
fi

if exists wifi-menu; then
    alias wifi-menu='sudo wifi-menu'
fi

if exists xclip; then
    alias xclip='xclip -selection c'
fi

if exists youtube-dl; then
    alias ytd='youtube-dl'
    alias ytx='youtube-dl --extract-audio --add-metadata --audio-format vorbis'
fi

##### DEVICE SPECIFIC DECLARATIONS #####

if [ "$HOSTNAME" = aisa.fi.muni.cz ] || [[ "$HOSTNAME" =~ nymfe* ]]; then
    export PS1='\[\e[93m\]\u\[\e[m\]@\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[96m\]\w\[\e[m\] \[\e[93m\]\\$\[\e[m\] '
    . /packages/run/modules-2.0/init/bash 2>/dev/null

    export CC="clang"
    export CXX="clang++"
    export LANG="cs_CZ.UTF-8"
    ulimit -c 0
    module add gcc-10.2
    module add llvm-5.0.0
    module add cmake-3.6.2
    module add gcovr-3.3
fi

if [[ "$HOSTNAME" = erigona.fi.muni.cz ]]; then
    export PS1='\[\e[93m\]\u\[\e[m\]@\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[96m\]\w\[\e[m\] \[\e[93m\]\\$\[\e[m\] '
fi

if [ "$HOSTNAME" = proto09-beta ]; then
    export PS1='\[\e[97m\]\u\[\e[96m\]@\[\e[97m\]\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[91m\]\w\[\e[m\] '
fi

if [ "$HOSTNAME" = deimos ] || [ "$HOSTNAME" = enceladus ]; then
    export PS1='\[\e[93m\]\u\[\e[m\]@\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[96m\]\w\[\e[m\] \[\e[93m\]\\$\[\e[m\] '
fi

if [ "$HOSTNAME" = localhost ]; then  # probably termux
    export PS1='\[\e[93m\]$(headhash 4)\[\e[92m\]$(headbranch)\[\e[93m\]\w\[\e[m\] \[\e[96m\]\\$\[\e[m\] '
fi

if [ "$HOSTNAME" = redtwo ]; then
    export PS1='\[\e[97m\]\u\[\e[96m\]@\[\e[97m\]\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[91m\]\w\[\e[m\] '
    export PATH="/home/$USER/.local/bin:$PATH"
    export NODE_OPTIONS=

    rover () {
        $BROWSER "https://rover.redhat.com/people/profile/$1"
    }
    alias django='PES_DEVEL=1 ./manage.py'
fi

if [[ "$HOSTNAME" =~ leapp-20* ]]; then  # leapp vagrant boxes
    getPR() {
        if [[ $(rpm -qa "$1") =~ (PR[0-9]+) ]]; then
            echo "${BASH_REMATCH[1]:2}"
            return 0
        else
            return 1
        fi
    }
    # https://serverfault.com/a/513372
    RHEL=$(rpm -q --queryformat '%{VERSION}' $(rpm -qa '(redhat|sl|slf|centos|oraclelinux)-release(|-server|-workstation|-client|-computenode)'))
    PS1PREFIX='\[\e[91m\]$RHEL \[\e[96m\]'
    FPR=$(getPR leapp) && PS1PREFIX="${PS1PREFIX}FPR:${FPR} "
    RPR=$(getPR leapp-repository) && PS1PREFIX="${PS1PREFIX}RPR:${RPR} "
    export PS1="$PS1PREFIX"'\[\e[97m\]\u\[\e[91m\]@\[\e[95m\]\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[96m\]\w\[\e[m\] '
fi
