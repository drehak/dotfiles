#!/bin/bash
# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
if ! shopt -oq posix; then
    if [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    elif [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    fi
fi

# Unlimited history
export HISTFILESIZE=
export HISTSIZE=
shopt -s histappend
shopt -s checkwinsize

exists() {
    command -v "$1" >/dev/null
    return $?
}

if exists git; then
    headhash() {  # $1 = max characters
        git branch &>/dev/null && echo "$(git rev-parse HEAD | head -c "$1") "
    }
    headbranch() {
        git branch &>/dev/null && echo "$(git rev-parse --abbrev-ref HEAD) "
    }
    export PS1='\[\e[97m\]\u\[\e[91m\]@\[\e[97m\]\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[96m\]\w\[\e[m\] '
else
    export PS1='\[\e[97m\]\u\[\e[91m\]@\[\e[97m\]\h \[\e[96m\]\w\[\e[m\] '
fi

if exists vim; then
    export EDITOR=vim
else
    export EDITOR=vi  # I mean, it's almost everywhere
fi

bashrc() {
    local path="$HOME/.bashrc"
    $EDITOR "$path"
    >&2 echo "Reloading bashrc"
    source "$path"
}

######### WORKS WITH COREUTILS #########

cdp () {
    cd -P -- "$1" 
}

alias ls="ls --color=auto"

mkcdir () {
    mkdir -p -- "$1" && cd -P -- "$1"
}

n() {
     local threshold=16
     local file=~/notes
     local lines

     if [ "$1" != "" ]; then
          echo "$@" >> $file
          return 0
     fi
     if [ ! -f $file ]; then
          echo " === no notes ==="
          return 1
     fi
     lines=$(wc -l < $file)
     if [ $(( lines > threshold )) = 1 ]; then
          echo " === last $threshold lines ==="
     fi
     tail -n $threshold $file
     return 0
}

# color stderr of a command in red
# note: if interlaced with stdout, outputs may be slightly out of order
rederr() {
    "$@" 2> >(while read -r line; do echo -e "\e[31m$line\e[0m" >&2; done);
}

stopwatch() {
    date1=$(date +%s); while true; do
        echo -ne "$(date -u --date @$(($(date +%s) - date1)) +%H:%M:%S)\r";
    done
}

#### COMMAND DEPENDENT DECLARATIONS ####

if exists ansible; then
    # no cows!
    export ANSIBLE_NOCOWS=1
fi

if exists cal; then
    alias cal="cal -m"
fi

if exists clang; then
    export CC=clang
    export CXX=clang++
fi

if exists curl; then
    alias myip='curl ipinfo.io/ip'
fi

if exists dnf; then
    alias dnfi="sudo dnf install"
    alias dnfr="sudo dnf remove"
    alias dnfs="dnf search"
    alias dnfu="sudo dnf update"
fi

if exists grep; then
    alias grep="grep --color=auto"
    greppy() {
        while read -rp $'\e[1;92m> \e[0;93m' expr; do
            echo -n $'\e[m'
            grep --color=auto -nr "$expr"
            echo
        done
        echo
    }

    hisgrep () {
        history | grep "$@"
    }
fi

if exists git; then
    alias gits='git status'
    alias gitas='git add . && git status'
    alias oneline='git log --oneline'
    ghclone () {
        git clone "https://github.com/$1/$2"
    }
fi

if exists i3; then
    alias i3c='vim ~/.i3/config'
    alias i3sc='vim ~/.i3status.conf'
fi

if exists morf; then
    # morf colors
    export PRETTY="color"
fi

if exists most; then
    # Color manual pages
    if exists man; then
        alias man="PAGER=most man"
    fi
    if exists sfdoc; then
        alias sfdoc="PAGER=most sfdoc"
    fi
elif exists man; then
    man() {
        LESS_TERMCAP_md=$'\e[01;31m' \
        LESS_TERMCAP_me=$'\e[0m' \
        LESS_TERMCAP_se=$'\e[0m' \
        LESS_TERMCAP_so=$'\e[01;44;33m' \
        LESS_TERMCAP_ue=$'\e[0m' \
        LESS_TERMCAP_us=$'\e[01;32m' \
        command man "$@"
    }
fi

if exists pacman; then
    alias Syu='sudo pacman -Syu'
    alias Scc='sudo pacman -Scc'
    alias Sc='sudo pacman -Sc'
    alias Ss='pacman -Ss'
    alias S='sudo pacman -S'
    alias R='sudo pacman -R'
fi

if exists python3; then
    alias py3='python3'
fi

if exists rtorrent; then
    stty stop undef
    stty start undef
fi

if exists sudo; then
    alias fuck='sudo $(history -p \!\!)'
fi

if exists systemctl; then
    # No pager for systemctl
    export SYSTEMD_PAGER=
fi

if exists tmux; then
    alias tmuxrc='vim ~/.tmux.conf'
fi

if exists tput; then
    dims() {
        echo "$(tput lines)x$(tput cols)"
    }
fi

if exists tree; then
    alias tree="tree -C"
fi

if exists tty-clock; then
    alias tty-clock="tty-clock -cC 5"
fi

if exists vagrant; then
    alias vscp='vagrant ssh'
    alias vdes='vagrant destroy -f'
    alias vssh='vagrant ssh'
    alias vup='vagrant up'
    alias vups='vagrant up && vagrant ssh'
fi

if exists vim; then
    alias vimp='vim -p *'
    alias vimrc="vim ~/.vimrc"
fi

if exists which; then
    src () {
        $EDITOR "$(which --skip-alias --skip-functions "$1")"
    }
fi

if exists wifi-menu; then
    alias wifi-menu='sudo wifi-menu'
fi

if exists xclip; then
    alias xclip='xclip -selection c'
fi

if exists youtube-dl; then
    alias ytd='youtube-dl'
    alias ytx='youtube-dl --extract-audio --add-metadata --audio-format vorbis'
fi

##### DEVICE SPECIFIC DECLARATIONS #####

if [ "$HOSTNAME" = deimos ] || [ "$HOSTNAME" = enceladus ]; then
    export PS1='\[\e[93m\]\u\[\e[m\]@\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[96m\]\w\[\e[m\] \[\e[93m\]\\$\[\e[m\] '
fi

if [ "$HOSTNAME" = localhost ]; then  # probably termux
    export PS1='\[\e[93m\]$(headhash 4)\[\e[92m\]$(headbranch)\[\e[93m\]\w\[\e[m\] \[\e[96m\]\\$\[\e[m\] '
fi

if [ "$HOSTNAME" = redpad ]; then
    rover () {
        firefox --new-tab "https://rover.redhat.com/people/profile/$1"
    }
    alias pesdb='sudo docker start pesdb'
    alias django='PES_DEVEL=1 ./manage.py'
fi

if [[ "$HOSTNAME" =~ leapp-20* ]]; then  # leapp vagrant boxes
    getPR() {
        if [[ $(rpm -qa "$1") =~ (PR[0-9]+) ]]; then
            echo "${BASH_REMATCH[1]:2}"
            return 0
        else
            return 1
        fi
    }
    PS1PREFIX='\[\e[96m\]'
    FPR=$(getPR leapp) && PS1PREFIX="${PS1PREFIX}FPR:${FPR} "
    RPR=$(getPR leapp-repository) && PS1PREFIX="${PS1PREFIX}RPR:${RPR} "
    export PS1="$PS1PREFIX"'\[\e[97m\]\u\[\e[91m\]@\[\e[95m\]\h \[\e[93m\]$(headhash 6)\[\e[92m\]$(headbranch)\[\e[96m\]\w\[\e[m\] '
fi
